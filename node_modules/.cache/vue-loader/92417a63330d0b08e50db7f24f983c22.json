{"remainingRequest":"/home/views/aquaman_view/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/views/aquaman_view/src/views/poc-vul/task.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/views/aquaman_view/src/views/poc-vul/task.vue","mtime":1606458937732},{"path":"/home/views/aquaman_view/node_modules/css-loader/dist/cjs.js","mtime":1601261329179},{"path":"/home/views/aquaman_view/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1601261366078},{"path":"/home/views/aquaman_view/node_modules/postcss-loader/src/index.js","mtime":1601261365169},{"path":"/home/views/aquaman_view/node_modules/cache-loader/dist/cjs.js","mtime":1601261325203},{"path":"/home/views/aquaman_view/node_modules/vue-loader/lib/index.js","mtime":1601261366062}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1peGluLWNvbXBvbmVudHMtY29udGFpbmVyIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYyZjU7CiAgICBwYWRkaW5nOiAzMHB4OwogICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDg0cHgpOwp9Ci50ZXh0IHsKICAgIGZvbnQtc2l6ZTogMTRweDsKfQouY2xlYXJmaXg6YmVmb3JlLAouY2xlYXJmaXg6YWZ0ZXIgewogICAgZGlzcGxheTogdGFibGU7CiAgICBjb250ZW50OiAiIjsKfQouY2xlYXJmaXg6YWZ0ZXIgewogICAgY2xlYXI6IGJvdGg7Cn0KLmJveC1jYXJkLWluIHsKICAgIHdpZHRoOiA2MCU7Cn0KLmR1bXAtYm94IHsKICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICBjb2xvcjogIzYwNjI2NjsKfQo="},{"version":3,"sources":["task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task.vue","sourceRoot":"src/views/poc-vul","sourcesContent":["<template>\n  <div class=\"mixin-components-container\">\n    <el-row>\n      <el-card class=\"box-card\">\n        <div slot=\"header\" class=\"clearfix\">\n          <span>{{title}}</span>\n        </div>\n        <div style=\"margin-bottom:50px;\">\n          <el-form ref=\"form\" :model=\"form\" label-width=\"140px\">\n            <el-form-item label=\"任务名\" class=\"is-required\">\n              <el-input v-if=\"isEditPage\" v-model=\"form.task_name\" disabled></el-input>\n              <el-input v-else v-model=\"form.task_name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"扫描周期\" class=\"is-required\">\n              <el-select v-model=\"form.recursion\" placeholder=\"请选择\">\n                <el-option label=\"一次\" :value=0></el-option>\n                <el-option label=\"每日\" :value=1></el-option>\n                <el-option label=\"每周\" :value=7></el-option>\n                <el-option label=\"每月\" :value=30></el-option>\n              </el-select>\n            </el-form-item>\n            <el-form-item label=\"检测目标\">\n              <el-input v-model=\"form.target_list\" type=\"textarea\" :rows=\"4\" placeholder=\"http://example.com, 多条换行\" />\n            </el-form-item>\n            <el-form-item>\n              <el-card class=\"box-card-in\">\n                <div slot=\"header\" class=\"clearfix\">\n                  <span class=\"dump-box\">插件列表</span>\n                  <el-button style=\"float: right; margin-top: 3px;\" type=\"text\" @click=\"openDialog()\">添加插件</el-button>\n                </div>\n                <el-timeline>\n                  <el-timeline-item v-for=\"(item, index) in form.pluginid_list\" :key=\"index\" :color=\"'#0bbd87'\" :timestamp=\"plugin_list[item].plugin_date\">\n                    {{plugin_list[item].plugin_name}}\n                    <el-button type=\"danger\" size=\"mini\" style=\"float: right; margin-top: 3px;\" @click=\"delListItem(index)\">删除</el-button>\n                  </el-timeline-item>\n                </el-timeline>\n              </el-card>\n            </el-form-item>\n            <el-form-item>\n              <el-button v-if=\"isEditPage\" type=\"danger\" :disabled=\"submitBtnDisabled\" @click=\"onUpdate()\">提交修改</el-button>\n              <el-button v-else type=\"primary\" :disabled=\"submitBtnDisabled\" @click=\"onSubmit(0)\">立即创建</el-button>\n              <!-- <el-button>取消</el-button> -->\n            </el-form-item>\n          </el-form>\n        </div>\n      </el-card>\n    </el-row>\n    <!--弹出组件-->\n    <el-dialog title=\"POC插件\" :visible.sync=\"dialog\">\n      <el-form ref=\"dataForm\" :model=\"temp_plugin\" label-position=\"left\" label-width=\"120px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"选择插件\" class=\"is-required\">\n          <el-select v-model=\"temp_plugin.index\" filterable  placeholder=\"请选择\" style=\"width: 120%\">\n            <el-option v-for=\"(item, index) in plugin_list\" :key=\"index\" :label=\"item.plugin_name\" :value=\"index\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"cancelConfirm()\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"onConfirm()\">Confirm</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { TaskDetail, PluginList, CreateTask, PutTask } from \"@/api/poc_vul\";\nexport default {\n    data() {\n        return {\n            isEditItem: false,\n            isEditPage: false, //是创建还是修改页面？\n            submitBtnDisabled: false,\n            dialog: false,\n            title: \"创建任务\",\n            list: [],\n            task_id: undefined,\n            form: {task_name: \"\", recursion: 0, pluginid_list:[], target_list:\"\"}, //第三个是plugin_list下标,第四个需要切分\n            plugin_list: [], //插件列表\n            temp_plugin: {index: undefined}, //选择的插件\n        };\n    },\n    created() {\n        this.getPlugins()\n        let id = this.$route.query.id\n        if (id) { //点击修改页面的跳转id uri参数(?id=64)\n            // 如果有id,查DB进行赋值\n            this.title = \"更新任务\"\n            this.isEditPage = true\n            this.isLoading = true\n            this.task_id = id\n            this.getDetail(id)\n        }else{ //创建POC任务\n            \n        }\n    },\n    methods: {\n        openDialog() {\n            this.dialog = true\n            this.isEditItem = false\n        },\n        // 关闭子页\n        closeChildPage() {\n          this.$router.go(-1)\n          this.$store.state.tagsView.visitedViews.splice(this.$store.state.tagsView.visitedViews.findIndex(item => item.path === this.$route.path), 1)\n          this.$router.push(this.$store.state.tagsView.visitedViews[this.$store.state.tagsView.visitedViews.length - 1].path)\n        },\n        // 更新组件配置\n        onUpdate() {\n            if (this.form.task_name.trim() == \"\") { this.$message({ message: \"任务名必填\", type: \"warning\" }); return }\n            if (this.form.target_list.trim() == \"\") { this.$message({ message: \"目标列表为空\", type: \"warning\" }); return }     \n            if (this.form.pluginid_list.length == 0) { this.$message({ message: \"插件列表为空\", type: \"warning\" }); return }\n            this.submitBtnDisabled = true\n            //1.组装数据\n            let targets = this.form.target_list.split('\\n').map(el => el.trim()).filter(item => item.trim() != '')\n            let plugins = []\n            for (let i=0; i<this.form.pluginid_list.length; i++){\n                plugins.push(this.plugin_list[this.form.pluginid_list[i]]._id)\n            }\n            let postData = { id: this.task_id, task_name: this.form.task_name, recursion: this.form.recursion, target_list: targets, plugins: plugins }\n            //2.调API接口\n            PutTask(postData).then((response) => {\n              this.submitBtnDisabled = false;\n              this.$notify({title: \"Success\", message: \"Update Successfully\" + response.data.errmsg, type: \"success\", duration: 5000});\n              this.closeChildPage()\n            }).catch(() => {\n              this.submitBtnDisabled = false;\n              this.$notify({title: \"Failed\", message: \"Failed Update\", type: \"error\", duration: 5000});\n            });\n        },\n        //提及创建组件\n        onSubmit() {\n            console.log(this.form)\n            if (this.form.task_name == \"\") { this.$message({ message: \"任务名必填\", type: \"warning\" }); return }\n            if (this.form.target_list == \"\") { this.$message({ message: \"目标列表为空\", type: \"warning\" }); return }     \n            if (this.form.pluginid_list.length == 0) { this.$message({ message: \"插件列表为空\", type: \"warning\" }); return }\n            this.submitBtnDisabled = true\n            //1.组装数据\n            let targets = this.form.target_list.split('\\n').map(el => el.trim()).filter(item => item.trim() != '')\n            let plugins = []\n            for (let i=0; i<this.form.pluginid_list.length; i++){\n                plugins.push(this.plugin_list[this.form.pluginid_list[i]]._id)\n            }\n            let postData = { task_name: this.form.task_name, recursion: this.form.recursion, target_list: targets, pluginid_list: plugins }\n            console.log(postData)\n            //2.调API接口\n            CreateTask(postData).then((response) => {\n                this.submitBtnDisabled = false;\n                this.$notify({ title: \"Success\", message: \"添加成功\" + response.data.errmsg, type: \"success\", duration: 5000, });\n                this.form = {}\n                this.closeChildPage()\n            }).catch((response) => {\n                this.submitBtnDisabled = false;\n                this.$notify({ title: \"Failed\", message: \"添加失败:\" + response.errmsg, type: \"danger\", duration: 5000, });\n            });\n        },\n        cancelConfirm() {\n            this.temp_plugin = {index: undefined}\n            this.dialog = false\n        },\n        //插件弹出框提交\n        onConfirm() {\n            let index = this.temp_plugin.index\n            if (index < 0) { this.$message(\"插件必选\"); return }\n            // 判断是否已经存在了\n            if (this.form.pluginid_list.indexOf(index)> -1){ this.$message({ message: \"该插件已经被选择\", type: \"warning\" }); return }\n            this.form.pluginid_list.push(index)\n            this.temp_plugin = {index: undefined}\n            this.dialog = false\n        },\n        // 删除插件列表中的插件\n        delListItem(index) { this.form.pluginid_list.splice(index, 1) },\n        // + 修改 获取当前任务信息\n        getDetail(id) {\n            TaskDetail({task_id: id}).then((response) => {\n                let target = response.data.target_list\n                let target_str = \"\"\n                for (let i=0;i<target.length;i++){\n                    target_str = target_str + target[i] + '\\n'\n                }\n                this.form = {\n                    task_name: response.data.task_name,\n                    target_list: target_str,\n                    pluginid_list: response.data.pluginid_list,\n                    recursion: response.data.recursion\n                }\n                this.matchPlugin(response.data.pluginid_list)\n                setTimeout(() => { this.isLoading = false; }, 1.5 * 1000);\n            });\n        },\n        // + 修改 pluginid_list匹配插件详情\n        matchPlugin(array){\n            let index_list = []\n            for (let i=0;i<this.plugin_list.length;i++){\n                for(let j=0;j<array.length;j++){\n                    if (array[j]==this.plugin_list[i]._id){\n                        index_list.push(i)\n                        break\n                    }\n                }\n            }\n            this.form.pluginid_list = index_list\n        },\n        // 获取Poc插件列表\n        getPlugins(){\n            let query = {page_no: 1, page_size: 100, info: \"\"} //页码、条数、查询字段\n            PluginList(query).then((response)=>{\n                this.plugin_list = response.data.list\n            }).catch(() => {\n                this.$notify({title: \"Error\", message: \"Failed Get Plugin Data\", type: \"danger\", duration: 5000})\n            })\n        },\n    }\n}\n</script>\n\n<style>\n.mixin-components-container {\n    background-color: #f0f2f5;\n    padding: 30px;\n    min-height: calc(100vh - 84px);\n}\n.text {\n    font-size: 14px;\n}\n.clearfix:before,\n.clearfix:after {\n    display: table;\n    content: \"\";\n}\n.clearfix:after {\n    clear: both;\n}\n.box-card-in {\n    width: 60%;\n}\n.dump-box {\n    font-weight: 700;\n    color: #606266;\n}\n</style>"]}]}